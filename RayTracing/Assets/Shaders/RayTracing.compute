// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
static const float PI = 3.14159265f;
float2 _PixelOffset;
float _t;

struct Ray
{
    float3 origin;
    float3 direction;
    float3 energy;
};

struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
};

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.0f, 1.0f, 1.0f);
    return ray;
}

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    return hit;
}

Ray CreateCameraRay(float2 uv)
{
    // Transform the camera origin to world space.
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

    // Inverst the perspective projection of the view-space position.
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;

    // Transform the direction from camera to world space and normalize.
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    return CreateRay(origin, direction);
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit)
{
    // Calculate distance along the ray where the ground plane is intersected.
    float t = -ray.origin.y / ray.direction.y;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = float3(0.0f, 1.0f, 0.0f);
    }
}

void IntersectSphere(Ray ray, inout RayHit bestHit, float4 sphere)
{
    // Calculate the distance along the ray where the sphere is intersected.
    float3 d = ray.origin - sphere.xyz;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.w * sphere.w;

    if (p2sqr < 0)
    {
        return;
    }

    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.xyz);
    }
}

RayHit Trace(Ray ray)
{
    RayHit bestHit = CreateRayHit();

    float yOffset = 0.0f;
    for (int x = -5; x < 10; x++) {
        for (int z = -5; z < 10; z++) {
            // float3 diff = mul(float3(x, 1, z), float3(4f,))
            float value = cos(_t + yOffset);
            IntersectSphere(ray, bestHit, float4(x * 4.0f, 1.0f + value, z * 4.0f, 1.0f));
            yOffset += 0.1f;
            // IntersectSphere(ray, bestHit, float4(x * 4.0f, 1.0f + value, z * 4.0f, 1.0f));
        }
    }
    // IntersectSphere(ray, bestHit, float4(0, 1.0f, 0, 1.0f));
    IntersectGroundPlane(ray, bestHit);

    return bestHit;
}

// float3 Shade(inout Ray ray, RayHit hit)
// {
//     if (hit.distance < 1.#INF)
//     {
//         // Return the normal if geometry was hit.
//         return hit.normal * 0.5f + 0.5f;
//     }
//     else
//     {
//         // Sample the skybox and write it to the texture if no hit.
//         float theta = acos(ray.direction.y) / -PI;
//         float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
//         return  _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0);
//     }
// }

float3 Shade(inout Ray ray, RayHit hit)
{
    if (hit.distance < 1.#INF)
    {
        float3 specular = float3(0.6f, 0.6f, 0.6f);

        // Reflect the ray and multiple energy with specular reflection.
        // Offset the origin using the normal so ray isn't occluded by surface.
        ray.origin = hit.position + hit.normal * 0.001f;
        ray.direction = reflect(ray.direction, hit.normal);
        ray.energy *= specular;

        // Return nothing.
        return float3(0.0f, 0.0f, 0.0f);
    }
    else
    {
        // Erase the ray's energy - the sky doesn't reflect anything.
        ray.energy = 0.0f;

        // Sample the skybox and write it to the texture if no hit.
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        return  _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0) * 1.5f;
    }
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    // Store the dimensions of the RenderTexture.
    uint width, height;
    Result.GetDimensions(width, height);

    // Transform the pixel to [-1, 1] range.
    float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f);

    // Get a ray for the UVs.
    Ray ray = CreateCameraRay(uv);

    // Write the colours.
    // Result[id.xy] = float4(ray.direction * 0.5f + 0.5f, 1.0f);

    // Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);

    // Transform cartesian direction vector to spherical coordinates and map to texture coordinates.
    // float theta = acos(ray.direction.y) / -PI;
    // float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
    //Result[id.xy] = _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0);

    // RayHit hit = Trace(ray);
    // float3 result = Shade(ray, hit);

    // Trace and shade, adding up result as we go.
    float3 result = float3(0, 0, 0);
    for (int i = 0; i < 8; i++) {
        RayHit hit = Trace(ray);
        result += ray.energy * Shade(ray, hit);

        if (!any(ray.energy))
        {
            break;
        }
    }

    Result[id.xy] = float4(result, 1);
}
